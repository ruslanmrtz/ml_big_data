import streamlit as st
import requests
import pandas as pd


data = pd.read_excel('data/Dataset_—Å_–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏_–ø—Ä–æ–ø—É—Å–∫–Ω–æ–π_—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏_—Å—Ç–∞–Ω—Ü–∏–π.xls')

st.subheader('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ')
st.title('–ú–æ–µ –ú–µ—Ç—Ä–æ üöá')

st.divider()
st.subheader('–£–¥–æ–±—Å—Ç–≤–æ –ø–æ–µ–∑–¥–∫–∏ –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É.')

line = st.selectbox(
    "–õ–∏–Ω–∏—è",
    data['line_name'].unique(),
)

start_station = st.selectbox(
    "–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è",
    data['station_name'].unique(),
)

end_station = st.selectbox(
    "–ö–æ–Ω–µ—á–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è",
    data['station_name'].unique(),
)

date = st.date_input("–î–∞—Ç–∞")
hour = st.time_input('–í—Ä–µ–º—è')

cluster_button = st.button('–û—Ü–µ–Ω–∏—Ç—å')

if cluster_button:
    response = requests.get('http://127.0.0.1:8000/get_cluster/', params={'line': line, 'station_start': start_station,
                                                    'station_end': start_station, 'hour': hour.hour,
                                                    'year': date.year, 'month': date.month, 'day': date.day})
    if response.json()['prediction'] == 0:
        st.warning('–ü–æ–µ–∑–¥–∫–∞ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–∞')
    if response.json()['prediction'] == 1:
        st.error('–û—Ç –ø–æ–µ–∑–¥–∫–∏ —Å–ª–µ–¥—É–µ—Ç –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è')
    if response.json()['prediction'] == 2:
        st.success('–ü–æ–µ–∑–¥–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞')


st.divider()
st.subheader('–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ç–∞–Ω—Ü–∏–π.')

model_name = st.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å",
    ["–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è", "Ridge", "Lasso"])

date_val = st.date_input("–î–∞—Ç–∞", key='adad')

cluster = st.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä",
    ["1", "2", "3"])

button_val = st.button('–†–∞—Å—á–∏—Ç–∞—Ç—å')

if button_val:
    models = {
        '–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è': 'lin_reg',
        'Ridge': 'ridge',
        'Lasso': 'lasso'
    }

    response = requests.get('http://127.0.0.1:8000/get_num_val/', params={'model_name': models[model_name],
                                                                          'cluster': cluster,
                                                                          'year': date.year, 'month': date.month,
                                                                          'day': date.day})

    st.metric('–ß–µ–ª–æ–≤–µ–∫', response.text)


with st.sidebar:
    st.header('–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º')
    st.write('–û—Ü–µ–Ω–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–µ–∑–¥–∫–∏')
    st.code('http://127.0.0.1:8000/get_cluster')
    st.table(pd.DataFrame({'–ü–∞—Ä–∞–º–µ—Ç—Ä': ['line', 'station_start', 'station_end', 'hour', 'day', 'month', 'year'],
              '–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö': ['str', 'str', 'str', 'int', 'int', 'int', 'int']}))
    st.write('–†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å')
    st.code('http://127.0.0.1:8000/get_num_val')
    st.table(pd.DataFrame({'–ü–∞—Ä–∞–º–µ—Ç—Ä': ['model_name', 'day', 'month', 'year'],
                           '–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö': ['str', 'int', 'int', 'int']}))